properties:
  template:
    containers:
    - name: primegate-auth-portal
      image: rust:1.82-slim
      command:
      - /bin/bash
      args:
      - -c
      - |
        # Install dependencies
        apt-get update && apt-get install -y pkg-config libssl-dev curl ca-certificates
        
        # Create Rust project
        cargo init --name primegate-auth-portal /app
        cd /app
        
        # Create Cargo.toml with compatible versions
        cat > Cargo.toml << 'EOF'
        [package]
        name = "primegate-auth-portal"
        version = "1.0.0"
        edition = "2021"
        
        [dependencies]
        actix-web = "4.4"
        actix-session = { version = "0.9", features = ["cookie-session"] }
        serde = { version = "1.0", features = ["derive"] }
        serde_json = "1.0"
        tokio = { version = "1.0", features = ["full"] }
        reqwest = { version = "0.11", features = ["json"] }
        oauth2 = "4.4"
        env_logger = "0.10"
        log = "0.4"
        EOF
        
        # Create main.rs with simplified Rust code
        cat > src/main.rs << 'RUST_CODE'
        use actix_web::{web, App, HttpServer, HttpResponse, Result, middleware::Logger};
        use actix_session::{Session, SessionMiddleware, storage::CookieSessionStore};
        use actix_web::cookie::Key;
        use serde::{Deserialize, Serialize};
        use oauth2::{
            AuthUrl, ClientId, ClientSecret, CsrfToken, RedirectUrl, Scope, TokenUrl,
            basic::BasicClient, AuthorizationCode, TokenResponse, reqwest::async_http_client,
        };
        use reqwest::Client;
        use std::env;
        
        #[derive(Debug, Serialize, Deserialize, Clone)]
        struct UserInfo {
            #[serde(rename = "displayName")]
            name: String,
            #[serde(rename = "userPrincipalName")]  
            email: String,
            #[serde(rename = "id")]
            id: String,
        }
        
        #[derive(Debug, Deserialize)]
        struct AuthCallbackQuery {
            code: Option<String>,
            state: Option<String>,
            error: Option<String>,
        }
        
        struct AppState {
            oauth_client: BasicClient,
            http_client: Client,
        }
        
        async fn home(session: Session) -> Result<HttpResponse> {
            let user_info: Option<UserInfo> = session.get("user").unwrap_or(None);
            
            let html = match user_info {
                Some(user) => {
                    format!(r#"
        <!DOCTYPE html>
        <html>
        <head>
            <title>üîê PrimeGate Portal - Authenticated</title>
            <style>
                body {{ 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                    margin: 0; padding: 40px; 
                    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                    min-height: 100vh; display: flex; align-items: center; justify-content: center;
                }}
                .container {{ 
                    max-width: 600px; background: white; padding: 50px; 
                    border-radius: 16px; box-shadow: 0 30px 60px rgba(0,0,0,0.15);
                    text-align: center;
                }}
                .profile-section {{
                    background: #e8f5e8; padding: 30px; border-radius: 12px; 
                    margin: 30px 0; border-left: 6px solid #28a745;
                }}
                .welcome-text {{ font-size: 1.5em; color: #155724; margin-bottom: 20px; }}
                .user-details {{ text-align: left; margin: 20px 0; }}
                .user-details strong {{ color: #155724; }}
                .button {{ 
                    background: linear-gradient(45deg, #dc3545, #c82333); 
                    color: white; padding: 15px 30px; text-decoration: none; 
                    border-radius: 8px; display: inline-block; margin: 20px 0;
                    font-weight: 600; font-size: 16px; transition: all 0.3s ease;
                }}
                .rust-badge {{ 
                    background: linear-gradient(45deg, #ce422b, #ff6b35);
                    color: white; padding: 8px 20px; border-radius: 25px; 
                    font-size: 14px; font-weight: 600; display: inline-block; margin: 10px;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üõ°Ô∏è PrimeGate Portal</h1>
                <div class="rust-badge">ü¶Ä 100% RUST POWERED</div>
                
                <div class="profile-section">
                    <div class="welcome-text">‚úÖ Welcome back, {}!</div>
                    <div class="user-details">
                        <p><strong>Display Name:</strong> {}</p>
                        <p><strong>Email:</strong> {}</p>
                        <p><strong>User ID:</strong> {}</p>
                    </div>
                </div>
                
                <a href="/auth/logout" class="button">üö™ Sign Out</a>
                
                <div style="margin-top: 30px; color: #666; font-size: 14px;">
                    <p>üîê Authenticated via Azure Entra ID</p>
                    <p>ü¶Ä Pure Rust Backend Authentication - LIVE!</p>
                </div>
            </div>
        </body>
        </html>
                    "#, 
                    user.name.split('@').next().unwrap_or(&user.name),
                    user.name,
                    user.email,
                    user.id
                    )
                },
                None => r#"
        <!DOCTYPE html>
        <html>
        <head>
            <title>üîê PrimeGate Portal</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                    margin: 0; padding: 40px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh; display: flex; align-items: center; justify-content: center;
                }
                .container { 
                    max-width: 600px; background: white; padding: 50px; 
                    border-radius: 16px; box-shadow: 0 30px 60px rgba(0,0,0,0.15);
                    text-align: center;
                }
                .header { margin-bottom: 40px; }
                .header h1 { color: #333; margin-bottom: 15px; font-weight: 700; font-size: 2.5em; }
                .rust-badge { 
                    background: linear-gradient(45deg, #ce422b, #ff6b35);
                    color: white; padding: 8px 20px; border-radius: 25px; 
                    font-size: 14px; font-weight: 600; display: inline-block; margin: 10px;
                }
                .security-badge { 
                    background: linear-gradient(45deg, #28a745, #20c997);
                    color: white; padding: 8px 20px; border-radius: 25px; 
                    font-size: 14px; font-weight: 600; display: inline-block; margin: 10px;
                }
                .login-section { 
                    background: #f8f9fa; padding: 40px; border-radius: 12px; 
                    margin: 30px 0; border-left: 6px solid #0078d4;
                }
                .button { 
                    background: linear-gradient(45deg, #0078d4, #106ebe); 
                    color: white; padding: 20px 40px; text-decoration: none; 
                    border-radius: 8px; display: inline-block; margin: 20px 0;
                    font-weight: 600; font-size: 18px; transition: all 0.3s ease;
                }
                .features {
                    background: #e8f4f8; padding: 20px; border-radius: 8px; margin: 20px 0;
                }
                .feature-item { margin: 10px 0; font-weight: 500; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üõ°Ô∏è PrimeGate Portal</h1>
                    <div>
                        <span class="rust-badge">ü¶Ä 100% RUST POWERED</span>
                        <span class="security-badge">üîí SECURE AUTH</span>
                    </div>
                    <p>Enterprise-grade authentication with Azure Entra ID</p>
                </div>
                
                <div class="login-section">
                    <h2>üîê Ready to Sign In</h2>
                    <p>Click below to authenticate with your Microsoft account</p>
                    <a href="/auth/login" class="button">üîê Sign In with Microsoft</a>
                </div>
                
                <div class="features">
                    <h3>üõ°Ô∏è Security Features</h3>
                    <div class="feature-item">üîí Pure Rust backend (no Node.js)</div>
                    <div class="feature-item">üõ°Ô∏è Server-side OAuth2 flow</div>
                    <div class="feature-item">üîê Azure Entra ID integration</div>
                    <div class="feature-item">‚ö° High-performance authentication</div>
                    <div class="feature-item">üîë Secure session management</div>
                </div>
            </div>
        </body>
        </html>
                "#.to_string()
            };
        
            Ok(HttpResponse::Ok().content_type("text/html").body(html))
        }
        
        async fn auth_login(data: web::Data<AppState>, session: Session) -> Result<HttpResponse> {
            let (auth_url, csrf_token) = data.oauth_client
                .authorize_url(CsrfToken::new_random)
                .add_scope(Scope::new("https://graph.microsoft.com/User.Read".to_string()))
                .add_scope(Scope::new("openid".to_string()))
                .add_scope(Scope::new("profile".to_string()))
                .add_scope(Scope::new("email".to_string()))
                .url();
        
            session.insert("csrf_token", csrf_token.secret().clone()).unwrap();
            log::info!("Redirecting to Azure AD: {}", auth_url);
        
            Ok(HttpResponse::Found()
                .insert_header(("Location", auth_url.to_string()))
                .finish())
        }
        
        async fn auth_callback(
            query: web::Query<AuthCallbackQuery>,
            data: web::Data<AppState>,
            session: Session,
        ) -> Result<HttpResponse> {
            if let Some(error) = &query.error {
                return Ok(HttpResponse::BadRequest().body(format!("Authentication error: {}", error)));
            }
        
            let code = match &query.code {
                Some(code) => code,
                None => return Ok(HttpResponse::BadRequest().body("Missing authorization code")),
            };
        
            let stored_csrf_token: Option<String> = session.get("csrf_token").unwrap_or(None);
            if stored_csrf_token != query.state {
                return Ok(HttpResponse::BadRequest().body("CSRF token mismatch"));
            }
        
            let token_result = data.oauth_client
                .exchange_code(AuthorizationCode::new(code.clone()))
                .request_async(async_http_client)
                .await;
        
            let token = match token_result {
                Ok(token) => token,
                Err(_) => return Ok(HttpResponse::InternalServerError().body("Token exchange failed")),
            };
        
            let access_token = token.access_token().secret();
            match get_user_info(&data.http_client, access_token).await {
                Ok(user_info) => {
                    session.insert("user", &user_info).unwrap();
                    session.insert("authenticated", true).unwrap();
                    
                    Ok(HttpResponse::Found()
                        .insert_header(("Location", "/"))
                        .finish())
                },
                Err(_) => Ok(HttpResponse::InternalServerError().body("Failed to get user information"))
            }
        }
        
        async fn get_user_info(client: &Client, access_token: &str) -> Result<UserInfo, reqwest::Error> {
            let response = client
                .get("https://graph.microsoft.com/v1.0/me")
                .header("Authorization", format!("Bearer {}", access_token))
                .send()
                .await?;
        
            let user_info = response.json::<UserInfo>().await?;
            Ok(user_info)
        }
        
        async fn auth_logout(session: Session) -> Result<HttpResponse> {
            session.clear();
            
            Ok(HttpResponse::Found()
                .insert_header(("Location", "/"))
                .finish())
        }
        
        async fn health() -> Result<HttpResponse> {
            Ok(HttpResponse::Ok().json(serde_json::json!({
                "status": "healthy",
                "service": "PrimeGate Auth Portal",
                "version": "1.0.0",
                "auth": "Pure Rust + Azure Entra ID",
                "runtime": "100% Rust - LIVE DEPLOYMENT!"
            })))
        }
        
        #[actix_web::main]
        async fn main() -> std::io::Result<()> {
            env_logger::init();
        
            let port = env::var("PORT").unwrap_or_else(|_| "8080".to_string());
            let tenant_id = env::var("TENANT_ID").expect("TENANT_ID required");
            let client_id = env::var("CLIENT_ID").expect("CLIENT_ID required");
            let client_secret = env::var("CLIENT_SECRET").expect("CLIENT_SECRET required");
            
            let redirect_uri = "https://primegate-auth-portal.delightfulfield-bccc7020.uksouth.azurecontainerapps.io/auth/callback";
        
            println!("üöÄ Starting PrimeGate Portal - PURE RUST EDITION");
            println!("ü¶Ä Rust authentication portal starting on port {}", port);
        
            let auth_url = AuthUrl::new(format!(
                "https://login.microsoftonline.com/{}/oauth2/v2.0/authorize",
                tenant_id
            )).expect("Invalid auth URL");
        
            let token_url = TokenUrl::new(format!(
                "https://login.microsoftonline.com/{}/oauth2/v2.0/token",
                tenant_id
            )).expect("Invalid token URL");
        
            let oauth_client = BasicClient::new(
                ClientId::new(client_id),
                Some(ClientSecret::new(client_secret)),
                auth_url,
                Some(token_url),
            )
            .set_redirect_uri(RedirectUrl::new(redirect_uri.to_string()).expect("Invalid redirect URL"));
        
            let secret_key = Key::generate();
            let http_client = Client::new();
        
            let app_state = web::Data::new(AppState {
                oauth_client,
                http_client,
            });
        
            println!("‚úÖ PrimeGate Portal configured and ready!");
        
            HttpServer::new(move || {
                App::new()
                    .app_data(app_state.clone())
                    .wrap(Logger::default())
                    .wrap(
                        SessionMiddleware::new(
                            CookieSessionStore::default(),
                            secret_key.clone()
                        )
                    )
                    .route("/", web::get().to(home))
                    .route("/health", web::get().to(health))
                    .route("/auth/login", web::get().to(auth_login))
                    .route("/auth/callback", web::get().to(auth_callback))
                    .route("/auth/logout", web::get().to(auth_logout))
            })
            .bind(format!("0.0.0.0:{}", port))?
            .run()
            .await
        }
        RUST_CODE
        
        echo "üöÄ Building Rust application with Rust 1.82..."
        cargo build --release
        
        if [ -f ./target/release/primegate-auth-portal ]; then
            echo "‚úÖ Rust build successful! Starting application..."
            exec ./target/release/primegate-auth-portal
        else
            echo "‚ùå Rust build failed! Binary not found."
            exit 1
        fi
      env:
      - name: CLIENT_ID
        value: "YOUR_CLIENT_ID"
      - name: CLIENT_SECRET
        value: "YOUR_CLIENT_SECRET"
      - name: TENANT_ID
        value: "YOUR_TENANT_ID"
      - name: RUST_LOG
        value: "info"
      - name: PORT
        value: "8080"
      resources:
        cpu: 2.0
        memory: 4Gi